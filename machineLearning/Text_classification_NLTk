{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Text_classification_NLTk","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"JKLCyV3GEpCE","colab_type":"code","outputId":"90723c03-f853-4c3f-df29-45670a542780","executionInfo":{"status":"ok","timestamp":1552891920327,"user_tz":-330,"elapsed":16388,"user":{"displayName":"Harsh Hindocha","photoUrl":"https://lh5.googleusercontent.com/-sxbVQ6etQIA/AAAAAAAAAAI/AAAAAAAAAZ4/eyGKKRkp9yw/s64/photo.jpg","userId":"05920504146995562811"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"cell_type":"code","source":["import nltk\n","import random\n","import string\n","nltk.download('movie_reviews')\n","from nltk.corpus import movie_reviews\n","\n","documents=[]\n","for category in movie_reviews.categories():\n","  for fileid in movie_reviews.fileids(category):\n","    documents.append((list(movie_reviews.words(fileid)), category))\n","\n","all_words = []\n","for w in movie_reviews.words():\n","    all_words.append(w.lower())\n","    \n","\n","all_words = [''.join(c for c in s if c not in string.punctuation) for s in all_words]\n","print(string.punctuation)\n","#for s in all_words:\n","#  s.translate(str.maketrans('', '', string.punctuation))\n","#  aw.append(s)\n","all_words = nltk.FreqDist(all_words)\n","print(all_words.most_common(15))\n","print(all_words[\"stupid\"])\n"],"execution_count":1,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package movie_reviews to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/movie_reviews.zip.\n","!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n","[('', 246977), ('the', 76565), ('a', 38107), ('and', 35580), ('of', 34123), ('to', 31938), ('is', 25203), ('in', 21825), ('s', 18514), ('it', 16109), ('that', 15927), ('as', 11378), ('with', 10792), ('for', 9961), ('his', 9588)]\n","253\n"],"name":"stdout"}]},{"metadata":{"id":"HifGsWnbEtCu","colab_type":"code","colab":{}},"cell_type":"code","source":["word_features = list(all_words.keys())[:3000]\n","\n","def find_features(document):\n","    words = set(document)\n","    features = {}\n","    for w in word_features:\n","        features[w] = (w in words)\n","\n","    return features\n","  \n","#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))\n","featuresets = [(find_features(rev), category) for (rev, category) in documents]\n","#print(featuresets)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"0zl4n77sT2Aa","colab_type":"code","outputId":"cdd47b7c-746d-44d0-8a77-f0807c1337a4","executionInfo":{"status":"ok","timestamp":1552891931184,"user_tz":-330,"elapsed":27180,"user":{"displayName":"Harsh Hindocha","photoUrl":"https://lh5.googleusercontent.com/-sxbVQ6etQIA/AAAAAAAAAAI/AAAAAAAAAZ4/eyGKKRkp9yw/s64/photo.jpg","userId":"05920504146995562811"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# set that we'll train our classifier with\n","training_set = featuresets[:1900]\n","\n","# set that we'll test against.\n","testing_set = featuresets[1900:]\n","\n","classifier = nltk.NaiveBayesClassifier.train(training_set)\n","print(\"Classifier accuracy percent:\",(nltk.classify.accuracy(classifier, testing_set))*100)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Classifier accuracy percent: 77.0\n"],"name":"stdout"}]},{"metadata":{"id":"vVs2e0ldlvJG","colab_type":"code","outputId":"eb3a091e-e525-4d39-ed06-d05572ef303f","executionInfo":{"status":"ok","timestamp":1552891931186,"user_tz":-330,"elapsed":27117,"user":{"displayName":"Harsh Hindocha","photoUrl":"https://lh5.googleusercontent.com/-sxbVQ6etQIA/AAAAAAAAAAI/AAAAAAAAAZ4/eyGKKRkp9yw/s64/photo.jpg","userId":"05920504146995562811"}},"colab":{"base_uri":"https://localhost:8080/","height":289}},"cell_type":"code","source":["classifier.show_most_informative_features(15)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Most Informative Features\n","                 idiotic = True              neg : pos    =     12.1 : 1.0\n","                  annual = True              pos : neg    =     10.7 : 1.0\n","               atrocious = True              neg : pos    =     10.5 : 1.0\n","                   sucks = True              neg : pos    =      9.5 : 1.0\n","                 frances = True              pos : neg    =      9.3 : 1.0\n","           unimaginative = True              neg : pos    =      7.5 : 1.0\n","                 cunning = True              pos : neg    =      7.0 : 1.0\n","             silverstone = True              neg : pos    =      6.9 : 1.0\n","                  sexist = True              neg : pos    =      6.9 : 1.0\n","                  regard = True              pos : neg    =      6.9 : 1.0\n","              schumacher = True              neg : pos    =      6.7 : 1.0\n","                  shoddy = True              neg : pos    =      6.3 : 1.0\n","                  suvari = True              neg : pos    =      6.3 : 1.0\n","                    mena = True              neg : pos    =      6.3 : 1.0\n","                 singers = True              pos : neg    =      6.3 : 1.0\n"],"name":"stdout"}]},{"metadata":{"id":"uXBAeg8YvHqV","colab_type":"text"},"cell_type":"markdown","source":["Save classifier object to a file using pickle"]},{"metadata":{"id":"TaNKpIIqvGL8","colab_type":"code","colab":{}},"cell_type":"code","source":["import pickle\n","save_classifier = open(\"naivebayes.pickle\",\"wb\")\n","pickle.dump(classifier, save_classifier)\n","save_classifier.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-lRGtIi2vVXG","colab_type":"code","outputId":"62b6d7d8-9c77-458c-de69-4f6f2ca1741d","executionInfo":{"status":"ok","timestamp":1552891932633,"user_tz":-330,"elapsed":28506,"user":{"displayName":"Harsh Hindocha","photoUrl":"https://lh5.googleusercontent.com/-sxbVQ6etQIA/AAAAAAAAAAI/AAAAAAAAAZ4/eyGKKRkp9yw/s64/photo.jpg","userId":"05920504146995562811"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["classifier_f = open(\"naivebayes.pickle\", \"rb\")\n","classifier = pickle.load(classifier_f)\n","classifier_f.close()\n","print(\"Classifier accuracy percent:\",(nltk.classify.accuracy(classifier, testing_set))*100)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Classifier accuracy percent: 77.0\n"],"name":"stdout"}]},{"metadata":{"id":"Nh1P42J7vgPn","colab_type":"code","outputId":"1036e22e-1e71-40a7-953b-93550b5a90ce","executionInfo":{"status":"ok","timestamp":1552891941549,"user_tz":-330,"elapsed":37386,"user":{"displayName":"Harsh Hindocha","photoUrl":"https://lh5.googleusercontent.com/-sxbVQ6etQIA/AAAAAAAAAAI/AAAAAAAAAZ4/eyGKKRkp9yw/s64/photo.jpg","userId":"05920504146995562811"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"cell_type":"code","source":["from nltk.classify.scikitlearn import SklearnClassifier\n","from sklearn.naive_bayes import MultinomialNB,BernoulliNB\n","MNB_classifier = SklearnClassifier(MultinomialNB())\n","MNB_classifier.train(training_set)\n","print(\"MultinomialNB accuracy percent:\",nltk.classify.accuracy(MNB_classifier, testing_set)*100)\n","\n","BNB_classifier = SklearnClassifier(BernoulliNB())\n","BNB_classifier.train(training_set)\n","print(\"BernoulliNB accuracy percent:\",nltk.classify.accuracy(BNB_classifier, testing_set)*100)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["MultinomialNB accuracy percent: 78.0\n","BernoulliNB accuracy percent: 77.0\n"],"name":"stdout"}]},{"metadata":{"id":"NPCtmN482SgM","colab_type":"code","outputId":"ff3a1541-88b4-4923-8880-7978687407fe","executionInfo":{"status":"ok","timestamp":1552891990919,"user_tz":-330,"elapsed":86692,"user":{"displayName":"Harsh Hindocha","photoUrl":"https://lh5.googleusercontent.com/-sxbVQ6etQIA/AAAAAAAAAAI/AAAAAAAAAZ4/eyGKKRkp9yw/s64/photo.jpg","userId":"05920504146995562811"}},"colab":{"base_uri":"https://localhost:8080/","height":275}},"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression,SGDClassifier\n","from sklearn.svm import SVC, LinearSVC, NuSVC\n","\n","print(\"Original Naive Bayes Algo accuracy percent:\", (nltk.classify.accuracy(classifier, testing_set))*100)\n","\n","MNB_classifier = SklearnClassifier(MultinomialNB())\n","MNB_classifier.train(training_set)\n","print(\"MNB_classifier accuracy percent:\", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)\n","\n","BernoulliNB_classifier = SklearnClassifier(BernoulliNB())\n","BernoulliNB_classifier.train(training_set)\n","print(\"BernoulliNB_classifier accuracy percent:\", (nltk.classify.accuracy(BernoulliNB_classifier, testing_set))*100)\n","\n","LogisticRegression_classifier = SklearnClassifier(LogisticRegression())\n","LogisticRegression_classifier.train(training_set)\n","print(\"LogisticRegression_classifier accuracy percent:\", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)\n","\n","SGDClassifier_classifier = SklearnClassifier(SGDClassifier())\n","SGDClassifier_classifier.train(training_set)\n","print(\"SGDClassifier_classifier accuracy percent:\", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)\n","\n","SVC_classifier = SklearnClassifier(SVC())\n","SVC_classifier.train(training_set)\n","print(\"SVC_classifier accuracy percent:\", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)\n","\n","LinearSVC_classifier = SklearnClassifier(LinearSVC())\n","LinearSVC_classifier.train(training_set)\n","print(\"LinearSVC_classifier accuracy percent:\", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)\n","\n","NuSVC_classifier = SklearnClassifier(NuSVC())\n","NuSVC_classifier.train(training_set)\n","print(\"NuSVC_classifier accuracy percent:\", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Original Naive Bayes Algo accuracy percent: 77.0\n","MNB_classifier accuracy percent: 78.0\n","BernoulliNB_classifier accuracy percent: 77.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["LogisticRegression_classifier accuracy percent: 82.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/stochastic_gradient.py:166: FutureWarning: max_iter and tol parameters have been added in SGDClassifier in 0.19. If both are left unset, they default to max_iter=5 and tol=None. If tol is not None, max_iter defaults to max_iter=1000. From 0.21, default max_iter will be 1000, and default tol will be 1e-3.\n","  FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["SGDClassifier_classifier accuracy percent: 79.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n","  \"avoid this warning.\", FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["SVC_classifier accuracy percent: 54.0\n","LinearSVC_classifier accuracy percent: 78.0\n","NuSVC_classifier accuracy percent: 79.0\n"],"name":"stdout"}]},{"metadata":{"id":"dbG4i1tKKYj8","colab_type":"text"},"cell_type":"markdown","source":["Combining Algorithms with NLTK"]},{"metadata":{"id":"eQAzPC4X2llb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":2451},"outputId":"02388691-c649-4c64-93a7-b4d24661ee83","executionInfo":{"status":"ok","timestamp":1552892564423,"user_tz":-330,"elapsed":53707,"user":{"displayName":"Harsh Hindocha","photoUrl":"https://lh5.googleusercontent.com/-sxbVQ6etQIA/AAAAAAAAAAI/AAAAAAAAAZ4/eyGKKRkp9yw/s64/photo.jpg","userId":"05920504146995562811"}}},"cell_type":"code","source":["import nltk\n","import random\n","from nltk.corpus import movie_reviews\n","from nltk.classify.scikitlearn import SklearnClassifier\n","import pickle\n","\n","from sklearn.naive_bayes import MultinomialNB, BernoulliNB\n","from sklearn.linear_model import LogisticRegression, SGDClassifier\n","from sklearn.svm import SVC, LinearSVC, NuSVC\n","\n","from nltk.classify import ClassifierI\n","from statistics import mode\n","\n","\n","class VoteClassifier(ClassifierI):\n","    def __init__(self, *classifiers):\n","        self._classifiers = classifiers\n","\n","    def classify(self, features):\n","        votes = []\n","        for c in self._classifiers:\n","            v = c.classify(features)\n","            votes.append(v)\n","        print(votes)\n","        return mode(votes)\n","\n","    def confidence(self, features):\n","        votes = []\n","        for c in self._classifiers:\n","            v = c.classify(features)\n","            votes.append(v)\n","\n","        choice_votes = votes.count(mode(votes))\n","        conf = choice_votes / len(votes)\n","        return conf\n","\n","documents = [(list(movie_reviews.words(fileid)), category)\n","             for category in movie_reviews.categories()\n","             for fileid in movie_reviews.fileids(category)]\n","\n","random.shuffle(documents)\n","\n","all_words = []\n","\n","for w in movie_reviews.words():\n","    all_words.append(w.lower())\n","\n","all_words = nltk.FreqDist(all_words)\n","\n","word_features = list(all_words.keys())[:3000]\n","\n","def find_features(document):\n","    words = set(document)\n","    features = {}\n","    for w in word_features:\n","        features[w] = (w in words)\n","\n","    return features\n","\n","#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))\n","\n","featuresets = [(find_features(rev), category) for (rev, category) in documents]\n","        \n","training_set = featuresets[:1900]\n","testing_set =  featuresets[1900:]\n","\n","#classifier = nltk.NaiveBayesClassifier.train(training_set)\n","\n","classifier_f = open(\"naivebayes.pickle\",\"rb\")\n","classifier = pickle.load(classifier_f)\n","classifier_f.close()\n","\n","\n","\n","\n","print(\"Original Naive Bayes Algo accuracy percent:\", (nltk.classify.accuracy(classifier, testing_set))*100)\n","classifier.show_most_informative_features(15)\n","\n","MNB_classifier = SklearnClassifier(MultinomialNB())\n","MNB_classifier.train(training_set)\n","print(\"MNB_classifier accuracy percent:\", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)\n","\n","BernoulliNB_classifier = SklearnClassifier(BernoulliNB())\n","BernoulliNB_classifier.train(training_set)\n","print(\"BernoulliNB_classifier accuracy percent:\", (nltk.classify.accuracy(BernoulliNB_classifier, testing_set))*100)\n","\n","LogisticRegression_classifier = SklearnClassifier(LogisticRegression())\n","LogisticRegression_classifier.train(training_set)\n","print(\"LogisticRegression_classifier accuracy percent:\", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)\n","\n","SGDClassifier_classifier = SklearnClassifier(SGDClassifier())\n","SGDClassifier_classifier.train(training_set)\n","print(\"SGDClassifier_classifier accuracy percent:\", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)\n","\n","##SVC_classifier = SklearnClassifier(SVC())\n","##SVC_classifier.train(training_set)\n","##print(\"SVC_classifier accuracy percent:\", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)\n","\n","LinearSVC_classifier = SklearnClassifier(LinearSVC())\n","LinearSVC_classifier.train(training_set)\n","print(\"LinearSVC_classifier accuracy percent:\", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)\n","\n","NuSVC_classifier = SklearnClassifier(NuSVC())\n","NuSVC_classifier.train(training_set)\n","print(\"NuSVC_classifier accuracy percent:\", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)\n","\n","\n","voted_classifier = VoteClassifier(classifier,\n","                                  NuSVC_classifier,\n","                                  LinearSVC_classifier,\n","                                  SGDClassifier_classifier,\n","                                  MNB_classifier,\n","                                  BernoulliNB_classifier,\n","                                  LogisticRegression_classifier)\n","\n","print(\"voted_classifier accuracy percent:\", (nltk.classify.accuracy(voted_classifier, testing_set))*100)\n","\n","print(\"Classification:\", voted_classifier.classify(testing_set[0][0]), \"Confidence %:\",voted_classifier.confidence(testing_set[0][0])*100)\n","print(\"Classification:\", voted_classifier.classify(testing_set[1][0]), \"Confidence %:\",voted_classifier.confidence(testing_set[1][0])*100)\n","print(\"Classification:\", voted_classifier.classify(testing_set[2][0]), \"Confidence %:\",voted_classifier.confidence(testing_set[2][0])*100)\n","print(\"Classification:\", voted_classifier.classify(testing_set[3][0]), \"Confidence %:\",voted_classifier.confidence(testing_set[3][0])*100)\n","print(\"Classification:\", voted_classifier.classify(testing_set[4][0]), \"Confidence %:\",voted_classifier.confidence(testing_set[4][0])*100)\n","print(\"Classification:\", voted_classifier.classify(testing_set[5][0]), \"Confidence %:\",voted_classifier.confidence(testing_set[5][0])*100)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Original Naive Bayes Algo accuracy percent: 83.0\n","Most Informative Features\n","                 idiotic = True              neg : pos    =     12.1 : 1.0\n","                  annual = True              pos : neg    =     10.7 : 1.0\n","               atrocious = True              neg : pos    =     10.5 : 1.0\n","                   sucks = True              neg : pos    =      9.5 : 1.0\n","                 frances = True              pos : neg    =      9.3 : 1.0\n","           unimaginative = True              neg : pos    =      7.5 : 1.0\n","                 cunning = True              pos : neg    =      7.0 : 1.0\n","             silverstone = True              neg : pos    =      6.9 : 1.0\n","                  sexist = True              neg : pos    =      6.9 : 1.0\n","                  regard = True              pos : neg    =      6.9 : 1.0\n","              schumacher = True              neg : pos    =      6.7 : 1.0\n","                  shoddy = True              neg : pos    =      6.3 : 1.0\n","                  suvari = True              neg : pos    =      6.3 : 1.0\n","                    mena = True              neg : pos    =      6.3 : 1.0\n","                 singers = True              pos : neg    =      6.3 : 1.0\n","MNB_classifier accuracy percent: 76.0\n","BernoulliNB_classifier accuracy percent: 78.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["LogisticRegression_classifier accuracy percent: 80.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/stochastic_gradient.py:166: FutureWarning: max_iter and tol parameters have been added in SGDClassifier in 0.19. If both are left unset, they default to max_iter=5 and tol=None. If tol is not None, max_iter defaults to max_iter=1000. From 0.21, default max_iter will be 1000, and default tol will be 1e-3.\n","  FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["SGDClassifier_classifier accuracy percent: 81.0\n","LinearSVC_classifier accuracy percent: 84.0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/svm/base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n","  \"avoid this warning.\", FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["NuSVC_classifier accuracy percent: 83.0\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['pos', 'neg', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'pos', 'pos', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'pos', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'pos', 'pos', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'pos', 'neg', 'neg', 'neg', 'neg', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'pos', 'neg', 'neg', 'neg', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'pos', 'pos', 'pos', 'neg', 'neg', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'pos', 'pos', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'pos', 'neg', 'neg', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'pos', 'pos', 'pos', 'neg', 'neg', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'pos', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'pos', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'neg', 'neg', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'pos', 'pos', 'neg', 'neg', 'neg', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'pos', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'neg', 'pos', 'neg', 'pos', 'pos', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'neg', 'neg', 'neg', 'pos', 'pos', 'neg']\n","['neg', 'neg', 'pos', 'neg', 'neg', 'neg', 'pos']\n","['neg', 'pos', 'pos', 'neg', 'neg', 'neg', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'pos', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'pos', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'pos', 'pos', 'pos', 'neg', 'neg', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'neg', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'neg', 'neg', 'neg', 'pos', 'pos', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'pos', 'neg', 'pos', 'pos', 'pos', 'pos']\n","['pos', 'pos', 'pos', 'neg', 'neg', 'neg', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","['neg', 'neg', 'pos', 'pos', 'neg', 'neg', 'pos']\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","voted_classifier accuracy percent: 82.0\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","Classification: neg Confidence %: 100.0\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","Classification: pos Confidence %: 100.0\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","Classification: neg Confidence %: 100.0\n","['pos', 'pos', 'pos', 'pos', 'pos', 'pos', 'pos']\n","Classification: pos Confidence %: 100.0\n","['pos', 'neg', 'pos', 'pos', 'pos', 'pos', 'pos']\n","Classification: pos Confidence %: 85.71428571428571\n","['neg', 'neg', 'neg', 'neg', 'neg', 'neg', 'neg']\n","Classification: neg Confidence %: 100.0\n"],"name":"stdout"}]},{"metadata":{"id":"TOzNVu5_mFQI","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}